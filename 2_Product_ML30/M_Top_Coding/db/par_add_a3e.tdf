--parallel_add DEVICE_FAMILY="MAX 10" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="SIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=4 WIDTH=19 WIDTHR=19 data result
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_padd 2017:10:25:18:06:53:SJ cbx_parallel_add 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ cbx_util_mgl 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 62 
SUBDESIGN par_add_a3e
( 
	data[75..0]	:	input;
	result[18..0]	:	output;
) 
VARIABLE
	add1_result[19..0]	:	WIRE;
	add5_result[19..0]	:	WIRE;
	add9_result[21..0]	:	WIRE;
	sft10a[21..0] : soft;
	sft11a[21..0] : soft;
	sft12a[21..0] : soft;
	sft2a[19..0] : soft;
	sft3a[19..0] : soft;
	sft4a[19..0] : soft;
	sft6a[19..0] : soft;
	sft7a[19..0] : soft;
	sft8a[19..0] : soft;
	w143w	: WIRE;
	w186w	: WIRE;
	w333w[21..0]	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out;
	add5_result[] = sft6a[].out + sft7a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	sft10a[].in = ( w143w, ( w143w, ( sft4a[19..19].out, ( sft4a[18..18].out, ( sft4a[17..17].out, ( sft4a[16..16].out, ( sft4a[15..15].out, ( sft4a[14..14].out, ( sft4a[13..13].out, ( sft4a[12..12].out, ( sft4a[11..11].out, ( sft4a[10..10].out, ( sft4a[9..9].out, ( sft4a[8..8].out, ( sft4a[7..7].out, ( sft4a[6..6].out, ( sft4a[5..5].out, ( sft4a[4..4].out, ( sft4a[3..3].out, ( sft4a[2..2].out, ( sft4a[1..1].out, sft4a[0..0].out)))))))))))))))))))));
	sft11a[].in = ( w186w, ( w186w, ( sft8a[19..19].out, ( sft8a[18..18].out, ( sft8a[17..17].out, ( sft8a[16..16].out, ( sft8a[15..15].out, ( sft8a[14..14].out, ( sft8a[13..13].out, ( sft8a[12..12].out, ( sft8a[11..11].out, ( sft8a[10..10].out, ( sft8a[9..9].out, ( sft8a[8..8].out, ( sft8a[7..7].out, ( sft8a[6..6].out, ( sft8a[5..5].out, ( sft8a[4..4].out, ( sft8a[3..3].out, ( sft8a[2..2].out, ( sft8a[1..1].out, sft8a[0..0].out)))))))))))))))))))));
	sft12a[].in = add9_result[];
	sft2a[].in = ( w186w, ( (! data[56..56]), ( data[55..55], ( data[54..54], ( data[53..53], ( data[52..52], ( data[51..51], ( data[50..50], ( data[49..49], ( data[48..48], ( data[47..47], ( data[46..46], ( data[45..45], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..38])))))))))))))))))));
	sft3a[].in = ( w186w, ( (! data[37..37]), ( data[36..36], ( data[35..35], ( data[34..34], ( data[33..33], ( data[32..32], ( data[31..31], ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..25], ( data[24..24], ( data[23..23], ( data[22..22], ( data[21..21], ( data[20..19])))))))))))))))))));
	sft4a[].in = add1_result[];
	sft6a[].in = ( w186w, ( (! data[75..75]), ( data[74..74], ( data[73..73], ( data[72..72], ( data[71..71], ( data[70..70], ( data[69..69], ( data[68..68], ( data[67..67], ( data[66..66], ( data[65..65], ( data[64..64], ( data[63..63], ( data[62..62], ( data[61..61], ( data[60..60], ( data[59..59], ( data[58..57])))))))))))))))))));
	sft7a[].in = ( w186w, ( (! data[18..18]), ( data[17..17], ( data[16..16], ( data[15..15], ( data[14..14], ( data[13..13], ( data[12..12], ( data[11..11], ( data[10..10], ( data[9..9], ( data[8..8], ( data[7..7], ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..2], ( data[1..0])))))))))))))))))));
	sft8a[].in = add5_result[];
	result[18..0] = w333w[18..0];
	w143w = B"1";
	w186w = B"0";
	w333w[] = ( sft12a[21..21].out, sft12a[20..20].out, sft12a[19..19].out, sft12a[18..18].out, sft12a[17..17].out, sft12a[16..16].out, sft12a[15..15].out, sft12a[14..14].out, sft12a[13..13].out, sft12a[12..12].out, sft12a[11..11].out, sft12a[10..10].out, sft12a[9..9].out, sft12a[8..8].out, sft12a[7..7].out, sft12a[6..6].out, sft12a[5..5].out, sft12a[4..4].out, sft12a[3..3].out, sft12a[2..2].out, sft12a[1..1].out, sft12a[0..0].out);
END;
--VALID FILE
